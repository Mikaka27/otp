#!/bin/sh
# %CopyrightBegin%
#
# SPDX-License-Identifier: Apache-2.0
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# %CopyrightEnd%

# ./create-dropbear-image dropbear 2025.88 [in-file]

case $1 in
    dropbear)
	FAMssh=dropbear
	VERssh=$2
	PFX=https://matt.ucc.asn.au/dropbear/releases/dropbear-
	SFX=.tar.bz2
	TMP=tmp.tar.bz2
	;;
    *)
	echo "Unsupported: $1"
	exit
esac

INPUT_FILE=$3

VER=${FAMssh}${VERssh}

# This way of fetching the tar-file separate from the docker commands makes
# http-proxy handling way easier. The wget command handles the $https_proxy
# variable while the docker command must have /etc/docker/something changed
# and the docker server restarted. That is not possible without root access.

# Make a Dockerfile. This method simplifies env variable handling considerably:
cat - > TempDockerFile <<EOF

    FROM  ssh_compat_suite-ubuntu:latest

    LABEL ${FAMssh}-version=${VER}

    WORKDIR /buildroot

    COPY ${TMP} .
    RUN  tar xf ${TMP}

    # Build and install

    WORKDIR ${FAMssh}-${VERssh}

    RUN apt-get update
    RUN apt-get -y install openssh-sftp-server

    # Probably VERY dropbear dependent...:
    RUN ./configure --without-pie \
                    --prefix=/buildroot/ssh \
                    --enable-pam \
                    LDFLAGS=-Wl,-R/buildroot/ssl/lib
    RUN  make
    RUN  make install
    RUN  mkdir -p /etc/dropbear
    RUN  mkdir -p /usr/libexec
    RUN  ln -s /usr/lib/sftp-server /usr/libexec/sftp-server

    RUN echo Built ${VER}

    # Start the daemon, but keep it in foreground to avoid killing the container
    CMD /buildroot/ssh/sbin/dropbear -R -F -p 1234

EOF

# Fetch the tar file. This could be done in an "ADD ..." in the Dockerfile,
# but then we hit the proxy problem...

if [ "x$INPUT_FILE" = "x" ]
then
    wget -O $TMP $PFX$VERssh$SFX

elif [ "x$INPUT_FILE" != "x$TMP" ]
then
    echo "Use $INPUT_FILE for input"
    cp $INPUT_FILE $TMP
fi

# Build the image:
docker build -t  ssh_compat_suite-ssh:$VER -f ./TempDockerFile .

# Cleaning
rm -fr ./TempDockerFile $TMP

